import{av as h,aw as d,a3 as c,aX as l,aI as i}from"./index-Cwqv58GJ.js";import{d as a,u as f,t as w,a as v}from"./timezone-7hMsYXTu.js";a.extend(f);a.extend(w);const m=[{day:"Sunday",letter:"S",value:0},{day:"Monday",letter:"M",value:1},{day:"Tuesday",letter:"T",value:2},{day:"Wednesday",letter:"W",value:3},{day:"Thursday",letter:"T",value:4},{day:"Friday",letter:"F",value:5},{day:"Saturday",letter:"S",value:6}],g=r=>{if(!r||r==="00:00:00")return"";try{const o=a().format("YYYY-MM-DD");return a.utc(`${o} ${r}`).tz(a.tz.guess()).format("HH:mm")}catch(o){return console.error("Error converting UTC to local time:",o),""}},k=r=>(r==null?void 0:r.startTime)!=="00:00:00"&&(r==null?void 0:r.endTime)!=="00:00:00",H=()=>{const r={};return m.forEach(o=>{r[o.day]={isAvailable:!1,from:"",to:""}}),r},W=(r,o)=>{const e=r.find(t=>t.doctorId===Number(o));if(!e)return console.log(`Doctor ${o} not found in API response`),null;if(!e.workingHours||e.workingHours.length===0)return console.log(`Doctor ${e.doctorName} (ID: ${o}) has no working hours set`),e.message&&console.log(`API Message: ${e.message}`),H();const n={};return m.forEach(t=>{const s=e.workingHours.find(u=>u.dayOfWeek===t.value);s&&k(s)?n[t.day]={isAvailable:!0,from:g(s.startTime),to:g(s.endTime)}:n[t.day]={isAvailable:!1,from:"",to:""}}),n},p=r=>{const o={};return r.forEach(e=>{var s;const n=e.doctorId,t=[];((s=e.workingHours)==null?void 0:s.length)>0&&e.workingHours.forEach(u=>{k(u)&&t.push(u.dayOfWeek)}),o[n]=t}),o},y=()=>v.getAllDoctorsWorkingHours();function F(r){const o=h(),e=d({queryKey:["working-hours",r],queryFn:async()=>{const s=await y();return W(s,r)},enabled:!!r,onError:s=>{i.show({title:"Error",message:"Failed to load working hours",color:"red"})}}),n=c({mutationFn:l.updateDoctorWorkingHours,onSuccess:()=>{o.invalidateQueries({queryKey:["working-hours",r]}),o.invalidateQueries({queryKey:["all-doctors-working-hours"]}),i.show({title:"Success",message:"Working hours updated successfully",color:"green"})},onError:s=>{i.show({title:"Error",message:s.message||"Failed to update working hours",color:"red"})}}),t=c({mutationFn:l.createDoctorWorkingHours,onSuccess:()=>{o.invalidateQueries({queryKey:["working-hours",r]}),o.invalidateQueries({queryKey:["all-doctors-working-hours"]}),i.show({title:"Success",message:"Working hours created successfully",color:"green"})},onError:s=>{i.show({title:"Error",message:s.message||"Failed to create working hours",color:"red"})}});return{workingHours:e.data,isLoading:e.isLoading,error:e.error,updateWorkingHours:n.mutate,createWorkingHours:t.mutate,isUpdating:n.isPending,isCreating:t.isPending}}function A(){const r=d({queryKey:["all-doctors-working-hours"],queryFn:async()=>{const o=await y();return p(o)},staleTime:3e5,onError:o=>{console.error("Error fetching all doctors working hours:",o)}});return{doctorsWorkingDays:r.data||{},isLoading:r.isLoading,error:r.error}}export{m as D,F as a,A as u};
