import{u as m}from"./useQuery-CnVbtgMZ.js";import{aO as P,aN as h,E as d}from"./index-DFVxnAOD.js";import{u as g}from"./useMutation-C_c6qR0s.js";const E="http://app8.runasp.net/api",l=P.create({baseURL:E,headers:{"Content-Type":"application/json"}});l.interceptors.request.use(e=>{const t=localStorage.getItem("access_token");return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e));const p={sendVerificationCode:async e=>{var t,r;try{return(await l.post("/Users/send-verification-code",{email:e})).data}catch(o){throw console.error("Error sending verification code:",o),new Error(((r=(t=o.response)==null?void 0:t.data)==null?void 0:r.message)||"Failed to send verification code")}},verifyCode:async(e,t)=>{var r,o;try{return(await l.post("/Users/verify-code",{email:e,code:t})).data}catch(c){throw console.error("Error verifying code:",c),new Error(((o=(r=c.response)==null?void 0:r.data)==null?void 0:o.message)||"Failed to verify code")}},getPatients:async()=>{var e,t;try{const r=await l.get("/Users/get-ALL-patients");return r.data.isSuccess&&Array.isArray(r.data.result)?r.data.result:(console.warn("Unexpected response format from get-patients:",r.data),[])}catch(r){throw console.error("Error fetching patients:",r),new Error(((t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message)||"Failed to fetch patients")}},banPatient:async e=>{var t,r;try{return(await l.post(`/Users/ban/${e}`)).data}catch(o){throw console.error("Error banning patient:",o),new Error(((r=(t=o.response)==null?void 0:t.data)==null?void 0:r.message)||"Failed to ban patient")}},unbanPatient:async e=>{var t,r;try{return(await l.post(`/Users/unban/${e}`)).data}catch(o){throw console.error("Error unbanning patient:",o),new Error(((r=(t=o.response)==null?void 0:t.data)==null?void 0:r.message)||"Failed to unban patient")}},getResetToken:async e=>{var t,r,o;try{console.log("Getting reset token for email:",e);const c=await l.post("/Users/reset-token",JSON.stringify(e));return console.log("Reset token response:",c.data),c.data}catch(c){throw console.error("Error getting reset token:",c),console.error("Error response data:",(t=c.response)==null?void 0:t.data),new Error(((o=(r=c.response)==null?void 0:r.data)==null?void 0:o.message)||"Failed to get reset token")}},resetPassword:async e=>{var t,r,o,c,u,w,y,s,n,i;try{console.log("Reset Password Request Body:",e);const a=await l.post("/Users/ResetPassword",e);return console.log("Reset Password Response:",a.data),a.data}catch(a){throw console.error("Error resetting password:",a),console.error("Error response data:",(t=a.response)==null?void 0:t.data),console.error("Full error response:",a.response),(o=(r=a.response)==null?void 0:r.data)!=null&&o.errors&&console.error("API validation errors:",a.response.data.errors),new Error(((u=(c=a.response)==null?void 0:c.data)==null?void 0:u.message)||((y=(w=a.response)==null?void 0:w.data)==null?void 0:y.messages)||(((i=(n=(s=a.response)==null?void 0:s.data)==null?void 0:n.errors)==null?void 0:i.length)>0?a.response.data.errors.join(", "):"Failed to reset password"))}},deleteAccount:async(e,t)=>{var r,o,c;try{console.log("Delete Account Request - Email:",e,"ID:",t);const u=await l.delete(`/Users/delete-user?email=${e}&id=${t}`);return console.log("Delete Account Response:",u.data),u.data}catch(u){throw console.error("Error deleting account:",u),console.error("Error response data:",(r=u.response)==null?void 0:r.data),new Error(((c=(o=u.response)==null?void 0:o.data)==null?void 0:c.message)||"Failed to delete account")}}};function v(){const e=h(),t=m({queryKey:["patients"],queryFn:p.getPatients,initialData:[],refetchOnMount:!0,staleTime:0,cacheTime:1e3*60*5}),r=g({mutationFn:p.banPatient,onMutate:async s=>{await e.cancelQueries({queryKey:["patients"]});const n=e.getQueryData(["patients"]);return e.setQueryData(["patients"],i=>i.map(a=>a.id===s?{...a,isBanned:!0}:a)),{previousPatients:n}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),d.show({title:"Success",message:"Patient has been banned",color:"red"})},onError:(s,n,i)=>{e.setQueryData(["patients"],i.previousPatients),d.show({title:"Error",message:s.message||"Failed to ban patient",color:"red"})}}),o=g({mutationFn:p.unbanPatient,onMutate:async s=>{await e.cancelQueries({queryKey:["patients"]});const n=e.getQueryData(["patients"]);return e.setQueryData(["patients"],i=>i.map(a=>a.id===s?{...a,isBanned:!1}:a)),{previousPatients:n}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),d.show({title:"Success",message:"Patient has been unbanned",color:"green"})},onError:(s,n,i)=>{e.setQueryData(["patients"],i.previousPatients),d.show({title:"Error",message:s.message||"Failed to unban patient",color:"red"})}}),c=g({mutationFn:p.getResetToken,onError:s=>{d.show({title:"Error",message:s.message||"Failed to get reset token",color:"red"})}}),u=g({mutationFn:p.resetPassword,onError:s=>{d.show({title:"Error",message:s.message||"Failed to reset password",color:"red"})}}),w=g({mutationFn:async s=>{try{const n=await p.getResetToken(s.email),i=(n==null?void 0:n.token)||n;if(!i)throw new Error("Failed to get reset token");const a={email:s.email,oldPassword:s.oldPassword,newPassword:s.newPassword,confirmNewPassword:s.confirmNewPassword,Token:i};return await p.resetPassword(a)}catch(n){throw n}},onSuccess:()=>{d.show({title:"Success",message:"Password reset successfully",color:"green"})},onError:s=>{d.show({title:"Error",message:s.message||"Failed to reset password",color:"red"})}}),y=g({mutationFn:({email:s,id:n})=>p.deleteAccount(s,n),onMutate:async({id:s})=>{await e.cancelQueries({queryKey:["patients"]});const n=e.getQueryData(["patients"]);return e.setQueryData(["patients"],i=>i.filter(a=>a.id!==s)),{previousPatients:n}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),d.show({title:"Success",message:"Patient deleted successfully",color:"green"})},onError:(s,{id:n},i)=>{i!=null&&i.previousPatients&&e.setQueryData(["patients"],i.previousPatients),d.show({title:"Error",message:s.message||"Failed to delete patient",color:"red"})}});return{patients:t.data||[],isLoading:t.isLoading,isError:t.isError,error:t.error,refetch:t.refetch,banPatient:r.mutate,unbanPatient:o.mutate,getResetToken:c.mutate,resetPassword:u.mutate,resetPasswordWithToken:w.mutate,deleteAccount:y.mutate,isGettingResetToken:c.isPending,isResettingPassword:w.isPending,isDeletingAccount:y.isPending}}export{v as u};
