import{b8 as y,b4 as w,b5 as m,af as g,K as i}from"./index-BvZYOKgn.js";const h="http://app8.runasp.net/api",c=y.create({baseURL:h,headers:{"Content-Type":"application/json"}});c.interceptors.request.use(e=>{const t=localStorage.getItem("access_token");return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e));const p={sendVerificationCode:async e=>{var t,r;try{return(await c.post("/Users/send-verification-code",{email:e})).data}catch(s){throw console.error("Error sending verification code:",s),new Error(((r=(t=s.response)==null?void 0:t.data)==null?void 0:r.message)||"Failed to send verification code")}},verifyCode:async(e,t)=>{var r,s;try{return(await c.post("/Users/verify-code",{email:e,code:t})).data}catch(a){throw console.error("Error verifying code:",a),new Error(((s=(r=a.response)==null?void 0:r.data)==null?void 0:s.message)||"Failed to verify code")}},getPatients:async()=>{var e,t;try{const r=await c.get("/Users/get-ALL-patients");return r.data.isSuccess&&Array.isArray(r.data.result)?r.data.result:(console.warn("Unexpected response format from get-patients:",r.data),[])}catch(r){throw console.error("Error fetching patients:",r),new Error(((t=(e=r.response)==null?void 0:e.data)==null?void 0:t.message)||"Failed to fetch patients")}},banPatient:async e=>{var t,r;try{return(await c.post(`/Users/ban/${e}`)).data}catch(s){throw console.error("Error banning patient:",s),new Error(((r=(t=s.response)==null?void 0:t.data)==null?void 0:r.message)||"Failed to ban patient")}},unbanPatient:async e=>{var t,r;try{return(await c.post(`/Users/unban/${e}`)).data}catch(s){throw console.error("Error unbanning patient:",s),new Error(((r=(t=s.response)==null?void 0:t.data)==null?void 0:r.message)||"Failed to unban patient")}},resetPassword:async e=>{var t,r,s;try{console.log("Reset Password Request Body:",e);const a=await c.post("/Users/ResetPassword",e);return console.log("Reset Password Response:",a.data),a.data}catch(a){throw console.error("Error resetting password:",a),console.error("Error response data:",(t=a.response)==null?void 0:t.data),new Error(((s=(r=a.response)==null?void 0:r.data)==null?void 0:s.message)||"Failed to reset password")}},deleteAccount:async(e,t)=>{var r,s,a;try{console.log("Delete Account Request - Email:",e,"ID:",t);const n=await c.delete(`/Users/delete-user?email=${e}&id=${t}`);return console.log("Delete Account Response:",n.data),n.data}catch(n){throw console.error("Error deleting account:",n),console.error("Error response data:",(r=n.response)==null?void 0:r.data),new Error(((a=(s=n.response)==null?void 0:s.data)==null?void 0:a.message)||"Failed to delete account")}}};function E(){const e=w(),t=m({queryKey:["patients"],queryFn:p.getPatients,initialData:[],refetchOnMount:!0,staleTime:0,cacheTime:1e3*60*5}),r=g({mutationFn:p.banPatient,onMutate:async o=>{await e.cancelQueries({queryKey:["patients"]});const u=e.getQueryData(["patients"]);return e.setQueryData(["patients"],d=>d.map(l=>l.id===o?{...l,isBanned:!0}:l)),{previousPatients:u}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),i.show({title:"Success",message:"Patient has been banned",color:"red"})},onError:(o,u,d)=>{e.setQueryData(["patients"],d.previousPatients),i.show({title:"Error",message:o.message||"Failed to ban patient",color:"red"})}}),s=g({mutationFn:p.unbanPatient,onMutate:async o=>{await e.cancelQueries({queryKey:["patients"]});const u=e.getQueryData(["patients"]);return e.setQueryData(["patients"],d=>d.map(l=>l.id===o?{...l,isBanned:!1}:l)),{previousPatients:u}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),i.show({title:"Success",message:"Patient has been unbanned",color:"green"})},onError:(o,u,d)=>{e.setQueryData(["patients"],d.previousPatients),i.show({title:"Error",message:o.message||"Failed to unban patient",color:"red"})}}),a=g({mutationFn:p.resetPassword,onSuccess:()=>{i.show({title:"Success",message:"Password reset successfully",color:"green"})},onError:o=>{i.show({title:"Error",message:o.message||"Failed to reset password",color:"red"})}}),n=g({mutationFn:({email:o,id:u})=>p.deleteAccount(o,u),onSuccess:()=>{i.show({title:"Success",message:"Account deleted successfully",color:"green"})},onError:o=>{i.show({title:"Error",message:o.message||"Failed to delete account",color:"red"})}});return{patients:t.data||[],isLoading:t.isLoading,isError:t.isError,error:t.error,refetch:t.refetch,banPatient:r.mutate,unbanPatient:s.mutate,resetPassword:a.mutate,deleteAccount:n.mutate,isResettingPassword:a.isPending,isDeletingAccount:n.isPending}}export{E as u};
