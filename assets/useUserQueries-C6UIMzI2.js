import{ah as y,b4 as l,b5 as b,aj as d,K as u}from"./index-B471k5WB.js";const g="http://app8.runasp.net/api",c=y.create({baseURL:g,headers:{"Content-Type":"application/json"}});c.interceptors.request.use(e=>{const t=localStorage.getItem("access_token");return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e));const p={getPatients:async()=>{var e,t;try{const a=await c.get("/Users/get-ALL-patients");return a.data.isSuccess&&Array.isArray(a.data.result)?a.data.result:(console.warn("Unexpected response format from get-patients:",a.data),[])}catch(a){throw console.error("Error fetching patients:",a),new Error(((t=(e=a.response)==null?void 0:e.data)==null?void 0:t.message)||"Failed to fetch patients")}},banPatient:async e=>{var t,a;try{return(await c.post(`/Users/ban/${e}`)).data}catch(n){throw console.error("Error banning patient:",n),new Error(((a=(t=n.response)==null?void 0:t.data)==null?void 0:a.message)||"Failed to ban patient")}},unbanPatient:async e=>{var t,a;try{return(await c.post(`/Users/unban/${e}`)).data}catch(n){throw console.error("Error unbanning patient:",n),new Error(((a=(t=n.response)==null?void 0:t.data)==null?void 0:a.message)||"Failed to unban patient")}}};function m(){const e=l(),t=b({queryKey:["patients"],queryFn:p.getPatients,initialData:[],refetchOnMount:!0,staleTime:0,cacheTime:1e3*60*5}),a=d({mutationFn:p.banPatient,onMutate:async r=>{await e.cancelQueries({queryKey:["patients"]});const i=e.getQueryData(["patients"]);return e.setQueryData(["patients"],s=>s.map(o=>o.id===r?{...o,isBanned:!0}:o)),{previousPatients:i}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),u.show({title:"Success",message:"Patient has been banned",color:"red"})},onError:(r,i,s)=>{e.setQueryData(["patients"],s.previousPatients),u.show({title:"Error",message:r.message||"Failed to ban patient",color:"red"})}}),n=d({mutationFn:p.unbanPatient,onMutate:async r=>{await e.cancelQueries({queryKey:["patients"]});const i=e.getQueryData(["patients"]);return e.setQueryData(["patients"],s=>s.map(o=>o.id===r?{...o,isBanned:!1}:o)),{previousPatients:i}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),u.show({title:"Success",message:"Patient has been unbanned",color:"green"})},onError:(r,i,s)=>{e.setQueryData(["patients"],s.previousPatients),u.show({title:"Error",message:r.message||"Failed to unban patient",color:"red"})}});return{patients:t.data||[],isLoading:t.isLoading,isError:t.isError,error:t.error,refetch:t.refetch,banPatient:a.mutate,unbanPatient:n.mutate}}export{m as u};
