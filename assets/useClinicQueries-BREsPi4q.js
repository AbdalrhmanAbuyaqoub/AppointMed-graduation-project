import{u as e}from"./useQuery-DQjSWo45.js";import{aL as r,aM as t,aN as i,aK as o,D as a}from"./index-C5KYdp5U.js";import{u as s}from"./useMutation-CFmdAs2Y.js";const c=r.create({baseURL:"http://app8.runasp.net/api",headers:{"Content-Type":"application/json"}});c.interceptors.request.use(e=>{const r=t();return r&&(e.headers.Authorization=`Bearer ${r}`),e},e=>Promise.reject(e)),c.interceptors.response.use(e=>e,e=>{var r;return 401===(null==(r=e.response)?void 0:r.status)&&i(),Promise.reject(e)});const n={getAllClinics:async()=>{try{const e=await c.get("/Clinic/get-all");return Array.isArray(e.data)?e.data:[]}catch(e){return[]}},getClinicById:async e=>{var r,t;try{return(await c.get(`/Clinic/get-by-id/${e}`)).data}catch(i){throw new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to fetch clinic")}},getDoctors:async e=>{var r,t;try{const r=await c.get(`/Clinic/get-doctors/${e}`);return Array.isArray(r.data)?r.data:[]}catch(i){throw new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to fetch doctors")}},createClinic:async e=>{var r,t;try{return(await c.post("/Clinic/create",e)).data}catch(i){throw new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to create clinic")}},updateClinic:async e=>{var r,t;try{return void(await c.put("/Clinic/update",e))}catch(i){throw new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to update clinic")}},addDoctor:async e=>{var r,t;try{return(await c.post("/Clinic/add-doctor",e)).data}catch(i){throw new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to add doctor")}},deleteClinic:async e=>{var r,t;try{return void(await c.delete(`/Clinic/delete/${e}`))}catch(i){throw new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to delete clinic")}},updateDoctor:async e=>{var r,t;try{return void(await c.put("/Clinic/update-doctor",e))}catch(i){throw new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to update doctor")}},deleteDoctor:async e=>{var r,t;try{return void(await c.delete(`/Clinic/delete-doctor/${e}`))}catch(i){throw new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to delete doctor")}},updateDoctorWorkingHours:async e=>{var r,t;try{return(await c.put("/Clinic/update-working-hours-doctor",e)).data}catch(i){throw i.response,new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to update working hours")}},createDoctorWorkingHours:async e=>{var r,t;try{return(await c.post("/Clinic/add-working-hours-doctor",e)).data}catch(i){throw i.response,new Error((null==(t=null==(r=i.response)?void 0:r.data)?void 0:t.message)||"Failed to add working hours")}}};function l(r){const t=o(),i=e({queryKey:["clinics"],queryFn:n.getAllClinics,initialData:[],refetchOnMount:!0,staleTime:0,cacheTime:3e5}),c=e({queryKey:["clinic",r],queryFn:()=>n.getClinicById(r),enabled:!!r}),l=e({queryKey:["clinic-doctors",r],queryFn:()=>n.getDoctors(r),enabled:!!r}),d=(i.data||[]).reduce((e,r)=>r.doctors?[...e,...r.doctors.map(e=>({...e,clinicId:r.id,clinicName:r.name}))]:e,[]),u=s({mutationFn:e=>n.createClinic(e),onSuccess:e=>{t.invalidateQueries({queryKey:["clinics"]}),a.show({title:"Success",message:"Clinic created successfully",color:"green"})},onError:e=>{a.show({title:"Error",message:e.message||"Failed to create clinic",color:"red"})}}),y=s({mutationFn:e=>n.updateClinic(e),onSuccess:(e,r)=>{t.invalidateQueries({queryKey:["clinics"]}),t.invalidateQueries({queryKey:["clinic",r.id]}),t.invalidateQueries({queryKey:["clinic-doctors",r.id]}),a.show({title:"Success",message:"Clinic updated successfully",color:"green"})},onError:e=>{a.show({title:"Error",message:e.message||"Failed to update clinic",color:"red"})}}),g=s({mutationFn:e=>n.addDoctor(e),onSuccess:(e,r)=>{t.invalidateQueries({queryKey:["clinics"]}),t.invalidateQueries({queryKey:["clinic",r.clinicId]}),t.invalidateQueries({queryKey:["clinic-doctors",r.clinicId]}),a.show({title:"Success",message:"Doctor added successfully",color:"green"})},onError:e=>{a.show({title:"Error",message:e.message||"Failed to add doctor",color:"red"})}}),p=s({mutationFn:e=>n.deleteClinic(e),onSuccess:(e,r)=>{t.invalidateQueries({queryKey:["clinics"]}),a.show({title:"Success",message:"Clinic deleted successfully",color:"green"})},onError:e=>{a.show({title:"Error",message:e.message||"Failed to delete clinic",color:"red"})}}),m=s({mutationFn:e=>n.updateDoctor(e),onSuccess:(e,r)=>{t.invalidateQueries({queryKey:["clinics"]}),t.invalidateQueries({queryKey:["clinic-doctors",r.clinicId]}),a.show({title:"Success",message:"Doctor updated successfully",color:"green"})},onError:e=>{a.show({title:"Error",message:e.message||"Failed to update doctor",color:"red"})}}),v=s({mutationFn:e=>n.deleteDoctor(e),onSuccess:(e,r)=>{t.invalidateQueries({queryKey:["clinics"]}),a.show({title:"Success",message:"Doctor deleted successfully",color:"green"})},onError:e=>{a.show({title:"Error",message:e.message||"Failed to delete doctor",color:"red"})}});return{clinics:i.data||[],clinic:c.data,doctors:r?l.data||[]:d,isLoading:i.isLoading||c.isLoading||l.isLoading,isError:i.isError||c.isError||l.isError,error:i.error||c.error||l.error,createClinic:u.mutateAsync,updateClinic:y.mutateAsync,addDoctor:g.mutateAsync,deleteClinic:p.mutateAsync,updateDoctor:m.mutateAsync,deleteDoctor:v.mutateAsync,isCreating:u.isPending,isUpdating:y.isPending,isAddingDoctor:g.isPending,isDeleting:p.isPending,isUpdatingDoctor:m.isPending,isDeletingDoctor:v.isPending}}export{n as c,l as u};
