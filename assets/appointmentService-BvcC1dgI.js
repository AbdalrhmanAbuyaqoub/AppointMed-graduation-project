import{ah as a}from"./index-B471k5WB.js";const s="http://app8.runasp.net/api",e=a.create({baseURL:s,headers:{"Content-Type":"application/json"}});e.interceptors.request.use(t=>{const r=localStorage.getItem("token");return r&&(t.headers.Authorization=`Bearer ${r}`),t},t=>Promise.reject(t));const i={getAllAppointments:async()=>{try{const t=await e.get("/Appointment/get-all-appointments-with-status");return Array.isArray(t.data)?t.data:[]}catch(t){throw console.error("Error fetching appointments:",t),t}},getAppointmentById:async t=>{try{return(await e.get(`/Appointment/get-by-id-Appointments/${t}`)).data}catch(r){throw console.error(`Error fetching appointment ${t}:`,r),r}},createAppointment:async t=>{try{return(await e.post("/Appointment/create",t)).data}catch(r){throw console.error("Error creating appointment:",r),r}},createAppointmentWithPatient:async t=>{var r,n;try{return console.log("Sending appointment data:",JSON.stringify(t,null,2)),(await e.post("/Appointment/create-with-patient",t)).data}catch(o){throw console.error("Error creating appointment with patient:",o),(r=o.response)!=null&&r.data&&console.error("Server error response:",o.response.data),(n=o.response)!=null&&n.status&&console.error("HTTP status:",o.response.status),o}},updateAppointment:async t=>{try{await e.put("/Appointment/update",t);return}catch(r){throw console.error("Error updating appointment:",r),r}},deleteAppointment:async t=>{try{await e.delete(`/Appointment/delete-Appointments/${t}`);return}catch(r){throw console.error("Error deleting appointment:",r),r}},getAppointmentsByClinic:async t=>{try{const r=await e.get(`/Appointment/get-Appointments-by-clinic/${t}`);return Array.isArray(r.data)?r.data:[]}catch(r){throw console.error(`Error fetching appointments for clinic ${t}:`,r),r}},getAppointmentsByDoctor:async t=>{try{const r=await e.get(`/Appointment/get-Appointments-by-doctor/${t}`);return Array.isArray(r.data)?r.data:[]}catch(r){throw console.error(`Error fetching appointments for doctor ${t}:`,r),r}},getAppointmentsByUser:async t=>{try{const r=await e.get(`/Appointment/get-Appointments-by-user/${t}`);return Array.isArray(r.data)?r.data:[]}catch(r){throw console.error(`Error fetching appointments for user ${t}:`,r),r}},getAvailableDoctors:async()=>{try{const t=await e.get("/Appointment/get-available-doctors");return Array.isArray(t.data)?t.data:[]}catch(t){throw console.error("Error fetching available doctors:",t),t}},getAllDoctorsWorkingHours:async()=>{try{const t=await e.get("/Appointment/all-doctors-working-hours");return Array.isArray(t.data)?t.data:[]}catch(t){throw console.error("Error fetching all doctors working hours:",t),t}},updateAppointmentStatus:async(t,r)=>{try{return(await e.put(`/Appointment/update-status/${t}?newStatus=${r}`)).data}catch(n){throw n}},getAppointmentStatus:async t=>{try{return(await e.get(`/Appointment/status-only/${t}`)).data}catch(r){throw r}}};export{i as a};
