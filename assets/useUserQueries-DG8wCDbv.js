import{u as e}from"./useQuery-Bb8Fuvgw.js";import{aL as t,aM as s,aN as a,aK as r,D as n}from"./index-BwajA8ZI.js";import{u as o}from"./useMutation-CLdZPAH1.js";const i=t.create({baseURL:"http://app8.runasp.net/api",headers:{"Content-Type":"application/json"}});i.interceptors.request.use(e=>{const t=s();return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e)),i.interceptors.response.use(e=>e,e=>{var t;return 401===(null==(t=e.response)?void 0:t.status)&&a(),Promise.reject(e)});const d={sendVerificationCode:async e=>{var t,s;try{return(await i.post("/Users/send-verification-code",{email:e})).data}catch(a){throw new Error((null==(s=null==(t=a.response)?void 0:t.data)?void 0:s.message)||"Failed to send verification code")}},verifyCode:async(e,t)=>{var s,a;try{return(await i.post("/Users/verify-code",{email:e,code:t})).data}catch(r){throw new Error((null==(a=null==(s=r.response)?void 0:s.data)?void 0:a.message)||"Failed to verify code")}},getPatients:async()=>{var e,t;try{const e=await i.get("/Users/get-ALL-patients");return e.data.isSuccess&&Array.isArray(e.data.result)?e.data.result:[]}catch(s){throw new Error((null==(t=null==(e=s.response)?void 0:e.data)?void 0:t.message)||"Failed to fetch patients")}},banPatient:async e=>{var t,s;try{return(await i.post(`/Users/ban/${e}`)).data}catch(a){throw new Error((null==(s=null==(t=a.response)?void 0:t.data)?void 0:s.message)||"Failed to ban patient")}},unbanPatient:async e=>{var t,s;try{return(await i.post(`/Users/unban/${e}`)).data}catch(a){throw new Error((null==(s=null==(t=a.response)?void 0:t.data)?void 0:s.message)||"Failed to unban patient")}},getResetToken:async e=>{var t,s;try{return(await i.post("/Users/reset-token",JSON.stringify(e))).data}catch(a){throw new Error((null==(s=null==(t=a.response)?void 0:t.data)?void 0:s.message)||"Failed to get reset token")}},resetPassword:async e=>{var t,s,a,r,n,o,d,u,l;try{return(await i.post("/Users/ResetPassword",e)).data}catch(c){throw null==(s=null==(t=c.response)?void 0:t.data)||s.errors,new Error((null==(r=null==(a=c.response)?void 0:a.data)?void 0:r.message)||(null==(o=null==(n=c.response)?void 0:n.data)?void 0:o.messages)||((null==(l=null==(u=null==(d=c.response)?void 0:d.data)?void 0:u.errors)?void 0:l.length)>0?c.response.data.errors.join(", "):"Failed to reset password"))}},deleteAccount:async(e,t)=>{var s,a;try{return(await i.delete(`/Users/delete-user?email=${e}&id=${t}`)).data}catch(r){throw new Error((null==(a=null==(s=r.response)?void 0:s.data)?void 0:a.message)||"Failed to delete account")}}};function u(){const t=r(),s=e({queryKey:["patients"],queryFn:d.getPatients,initialData:[],refetchOnMount:!0,staleTime:0,cacheTime:3e5}),a=o({mutationFn:d.banPatient,onMutate:async e=>{await t.cancelQueries({queryKey:["patients"]});const s=t.getQueryData(["patients"]);return t.setQueryData(["patients"],t=>t.map(t=>t.id===e?{...t,isBanned:!0}:t)),{previousPatients:s}},onSuccess:()=>{t.invalidateQueries({queryKey:["patients"]}),n.show({title:"Success",message:"Patient has been banned",color:"red"})},onError:(e,s,a)=>{t.setQueryData(["patients"],a.previousPatients),n.show({title:"Error",message:e.message||"Failed to ban patient",color:"red"})}}),i=o({mutationFn:d.unbanPatient,onMutate:async e=>{await t.cancelQueries({queryKey:["patients"]});const s=t.getQueryData(["patients"]);return t.setQueryData(["patients"],t=>t.map(t=>t.id===e?{...t,isBanned:!1}:t)),{previousPatients:s}},onSuccess:()=>{t.invalidateQueries({queryKey:["patients"]}),n.show({title:"Success",message:"Patient has been unbanned",color:"green"})},onError:(e,s,a)=>{t.setQueryData(["patients"],a.previousPatients),n.show({title:"Error",message:e.message||"Failed to unban patient",color:"red"})}}),u=o({mutationFn:d.getResetToken,onError:e=>{n.show({title:"Error",message:e.message||"Failed to get reset token",color:"red"})}}),l=o({mutationFn:d.resetPassword,onError:e=>{n.show({title:"Error",message:e.message||"Failed to reset password",color:"red"})}}),c=o({mutationFn:async e=>{try{const t=await d.getResetToken(e.email),s=(null==t?void 0:t.token)||t;if(!s)throw new Error("Failed to get reset token");const a={email:e.email,oldPassword:e.oldPassword,newPassword:e.newPassword,confirmNewPassword:e.confirmNewPassword,Token:s};return await d.resetPassword(a)}catch(t){throw t}},onSuccess:()=>{n.show({title:"Success",message:"Password reset successfully",color:"green"})},onError:e=>{n.show({title:"Error",message:e.message||"Failed to reset password",color:"red"})}}),p=o({mutationFn:({email:e,id:t})=>d.deleteAccount(e,t),onMutate:async({id:e})=>{await t.cancelQueries({queryKey:["patients"]});const s=t.getQueryData(["patients"]);return t.setQueryData(["patients"],t=>t.filter(t=>t.id!==e)),{previousPatients:s}},onSuccess:()=>{t.invalidateQueries({queryKey:["patients"]}),n.show({title:"Success",message:"Patient deleted successfully",color:"green"})},onError:(e,{id:s},a)=>{(null==a?void 0:a.previousPatients)&&t.setQueryData(["patients"],a.previousPatients),n.show({title:"Error",message:e.message||"Failed to delete patient",color:"red"})}});return{patients:s.data||[],isLoading:s.isLoading,isError:s.isError,error:s.error,refetch:s.refetch,banPatient:a.mutate,unbanPatient:i.mutate,getResetToken:u.mutate,resetPassword:l.mutate,resetPasswordWithToken:c.mutate,deleteAccount:p.mutate,isGettingResetToken:u.isPending,isResettingPassword:c.isPending,isDeletingAccount:p.isPending}}export{u};
