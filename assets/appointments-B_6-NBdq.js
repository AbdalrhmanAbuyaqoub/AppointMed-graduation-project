import{v as Y,w as We,j as r,S as W,L as Qe,x as ce,D as le,B as Le,y as ve,G as E,o as Z,z as xe,E as He,F as G,H as be,T as q,I as Ke,J as Ye,p as Re,A as te,q as Be,m as _e,K as Ce,M as F,Q as Ve,U as v,V as Ge,W as De,t as Ze,X as Je,C as Xe,Y as et,P as tt}from"./ui-60GCj8Dw.js";import{a as re,b as K,u as P}from"./query-D3UiA-xa.js";import{c as rt,a as de,n as j}from"./chat-CG0hw1Kq.js";import{r as k,u as st}from"./router-DP3ythCP.js";import{g as Ee}from"./vendor-DJG_os-6.js";import{f as ot,g as nt,h as at,i as it,j as ct,k as lt,l as dt,m as Pe,n as Te,a as ut,o as pt,p as mt}from"./icons-BQympANv.js";const ht=rt((e,t)=>({searchQuery:"",currentPage:null,setSearchQuery:s=>e(()=>({searchQuery:s})),setCurrentPage:s=>e(o=>o.currentPage&&o.currentPage!==s?{currentPage:s,searchQuery:""}:{currentPage:s}),clearSearch:()=>e(()=>({searchQuery:""})),getPlaceholder:s=>({appointments:"Search by patient name or appointment ID...",patients:"Search patients...",doctors:"Search doctors...",clinics:"Search clinics..."})[s]||"Search..."})),gt="http://app8.runasp.net/api",N=de.create({baseURL:gt,headers:{"Content-Type":"application/json"}});N.interceptors.request.use(e=>{const t=localStorage.getItem("token");return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e));const L={getAllAppointments:async()=>{try{const e=await N.get("/Appointment/get-all-appointments-with-status");return Array.isArray(e.data)?e.data:[]}catch(e){throw console.error("Error fetching appointments:",e),e}},getAppointmentById:async e=>{try{return(await N.get(`/Appointment/get-by-id-Appointments/${e}`)).data}catch(t){throw console.error(`Error fetching appointment ${e}:`,t),t}},createAppointment:async e=>{try{return(await N.post("/Appointment/create",e)).data}catch(t){throw console.error("Error creating appointment:",t),t}},createAppointmentWithPatient:async e=>{var t,s;try{return console.log("Sending appointment data:",JSON.stringify(e,null,2)),(await N.post("/Appointment/create-with-patient",e)).data}catch(o){throw console.error("Error creating appointment with patient:",o),(t=o.response)!=null&&t.data&&console.error("Server error response:",o.response.data),(s=o.response)!=null&&s.status&&console.error("HTTP status:",o.response.status),o}},updateAppointment:async e=>{try{await N.put("/Appointment/update",e);return}catch(t){throw console.error("Error updating appointment:",t),t}},deleteAppointment:async e=>{try{await N.delete(`/Appointment/delete-Appointments/${e}`);return}catch(t){throw console.error("Error deleting appointment:",t),t}},getAppointmentsByClinic:async e=>{try{const t=await N.get(`/Appointment/get-Appointments-by-clinic/${e}`);return Array.isArray(t.data)?t.data:[]}catch(t){throw console.error(`Error fetching appointments for clinic ${e}:`,t),t}},getAppointmentsByDoctor:async e=>{try{const t=await N.get(`/Appointment/get-Appointments-by-doctor/${e}`);return Array.isArray(t.data)?t.data:[]}catch(t){throw console.error(`Error fetching appointments for doctor ${e}:`,t),t}},getAppointmentsByUser:async e=>{try{const t=await N.get(`/Appointment/get-Appointments-by-user/${e}`);return Array.isArray(t.data)?t.data:[]}catch(t){throw console.error(`Error fetching appointments for user ${e}:`,t),t}},getAvailableDoctors:async()=>{try{const e=await N.get("/Appointment/get-available-doctors");return Array.isArray(e.data)?e.data:[]}catch(e){throw console.error("Error fetching available doctors:",e),e}},getAllDoctorsWorkingHours:async()=>{try{const e=await N.get("/Appointment/all-doctors-working-hours");return Array.isArray(e.data)?e.data:[]}catch(e){throw console.error("Error fetching all doctors working hours:",e),e}},updateAppointmentStatus:async(e,t)=>{try{return(await N.put(`/Appointment/update-status/${e}?newStatus=${t}`)).data}catch(s){throw s}},getAppointmentStatus:async e=>{try{return(await N.get(`/Appointment/status-only/${e}`)).data}catch(t){throw t}}};function ue(){const e=re(),{data:t=[],isLoading:s,error:o}=K({queryKey:["appointments"],queryFn:L.getAllAppointments,refetchInterval:3e4,refetchOnWindowFocus:!0,staleTime:0}),p=n=>K({queryKey:["appointment",n],queryFn:()=>L.getAppointmentById(n),enabled:!!n}),m=n=>K({queryKey:["appointments","clinic",n],queryFn:()=>L.getAppointmentsByClinic(n),enabled:!!n,refetchInterval:3e4,refetchOnWindowFocus:!0,staleTime:0}),h=n=>K({queryKey:["appointments","doctor",n],queryFn:()=>L.getAppointmentsByDoctor(n),enabled:!!n,refetchInterval:3e4,refetchOnWindowFocus:!0,staleTime:0}),y=n=>K({queryKey:["appointments","user",n],queryFn:()=>L.getAppointmentsByUser(n),enabled:!!n,refetchInterval:3e4,refetchOnWindowFocus:!0,staleTime:0}),d=n=>K({queryKey:["appointment-status",n],queryFn:()=>L.getAppointmentStatus(n),enabled:!!n,refetchInterval:3e4,refetchOnWindowFocus:!0}),c=P({mutationFn:L.createAppointment,onSuccess:()=>{e.invalidateQueries({queryKey:["appointments"]})}}),D=P({mutationFn:L.createAppointmentWithPatient,onSuccess:n=>{var i,f;e.invalidateQueries({predicate:w=>w.queryKey[0]==="appointments"}),(i=n==null?void 0:n.appointment)!=null&&i.doctorId&&e.invalidateQueries({queryKey:["appointments","doctor",n.appointment.doctorId]}),(f=n==null?void 0:n.appointment)!=null&&f.userId&&localStorage.setItem("lastPatientUserId",n.appointment.userId)}}),g=P({mutationFn:L.updateAppointment,onSuccess:()=>{e.invalidateQueries({predicate:n=>n.queryKey[0]==="appointments"})}}),l=P({mutationFn:L.deleteAppointment,onSuccess:()=>{e.invalidateQueries({predicate:n=>n.queryKey[0]==="appointments"})}}),a=P({mutationFn:({appointmentId:n,newStatus:i})=>L.updateAppointmentStatus(n,i),onSuccess:()=>{e.invalidateQueries({predicate:n=>n.queryKey[0]==="appointments"})}});return{appointments:t,isLoadingAppointments:s,appointmentsError:o,getAppointmentById:p,getAppointmentsByClinic:m,getAppointmentsByDoctor:h,getAppointmentsByUser:y,getAppointmentStatus:d,createAppointment:c,createAppointmentWithPatient:D,updateAppointment:g,deleteAppointment:l,updateAppointmentStatus:a}}const ft="http://app8.runasp.net/api",H=de.create({baseURL:ft,headers:{"Content-Type":"application/json"}});H.interceptors.request.use(e=>{const t=localStorage.getItem("token");return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e));const B={getAllClinics:async()=>{try{const e=await H.get("/Clinic/get-all");return Array.isArray(e.data)?e.data:[]}catch(e){return console.error("Error fetching clinics:",e),[]}},getClinicById:async e=>{var t,s;try{return(await H.get(`/Clinic/get-by-id/${e}`)).data}catch(o){throw console.error(`Error fetching clinic ${e}:`,o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to fetch clinic")}},getDoctors:async e=>{var t,s;try{const o=await H.get(`/Clinic/get-doctors/${e}`);return Array.isArray(o.data)?o.data:[]}catch(o){throw console.error(`Error fetching doctors for clinic ${e}:`,o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to fetch doctors")}},createClinic:async e=>{var t,s;try{return(await H.post("/Clinic/create",e)).data}catch(o){throw console.error("Error creating clinic:",o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to create clinic")}},updateClinic:async e=>{var t,s;try{await H.put("/Clinic/update",e);return}catch(o){throw console.error("Error updating clinic:",o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to update clinic")}},addDoctor:async e=>{var t,s;try{return(await H.post("/Clinic/add-doctor",e)).data}catch(o){throw console.error("Error adding doctor:",o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to add doctor")}},deleteClinic:async e=>{var t,s;try{await H.delete(`/Clinic/delete/${e}`);return}catch(o){throw new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to delete clinic")}},updateDoctor:async e=>{var t,s;try{await H.put("/Clinic/update-doctor",e);return}catch(o){throw console.error("Error updating doctor:",o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to update doctor")}},deleteDoctor:async e=>{var t,s;try{await H.delete(`/Clinic/delete-doctor/${e}`);return}catch(o){throw console.error("Error deleting doctor:",o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to delete doctor")}},updateDoctorWorkingHours:async e=>{var t,s;try{console.log("Updating working hours with payload:",JSON.stringify(e));const o=await H.put("/Clinic/update-working-hours-doctor",e);return console.log("Server response:",o.data),o.data}catch(o){throw console.error("Error updating doctor working hours:",o),o.response&&console.error("Server error response:",o.response.data),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to update working hours")}},createDoctorWorkingHours:async e=>{var t,s;try{console.log("Adding working hours with payload:",JSON.stringify(e));const o=await H.post("/Clinic/add-working-hours-doctor",e);return console.log("Server response:",o.data),o.data}catch(o){throw console.error("Error adding doctor working hours:",o),o.response&&console.error("Server error response:",o.response.data),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to add working hours")}}};function ke(e){const t=re(),s=K({queryKey:["clinics"],queryFn:B.getAllClinics,initialData:[],refetchOnMount:!0,staleTime:0,cacheTime:1e3*60*5}),o=K({queryKey:["clinic",e],queryFn:()=>B.getClinicById(e),enabled:!!e}),p=K({queryKey:["clinic-doctors",e],queryFn:()=>B.getDoctors(e),enabled:!!e}),m=(s.data||[]).reduce((l,a)=>a.doctors?[...l,...a.doctors.map(n=>({...n,clinicId:a.id,clinicName:a.name}))]:l,[]),h=P({mutationFn:l=>B.createClinic(l),onSuccess:l=>{t.invalidateQueries({queryKey:["clinics"]}),j.show({title:"Success",message:"Clinic created successfully",color:"green"})},onError:l=>{j.show({title:"Error",message:l.message||"Failed to create clinic",color:"red"})}}),y=P({mutationFn:l=>B.updateClinic(l),onSuccess:(l,a)=>{t.invalidateQueries({queryKey:["clinics"]}),t.invalidateQueries({queryKey:["clinic",a.id]}),t.invalidateQueries({queryKey:["clinic-doctors",a.id]}),j.show({title:"Success",message:"Clinic updated successfully",color:"green"})},onError:l=>{j.show({title:"Error",message:l.message||"Failed to update clinic",color:"red"})}}),d=P({mutationFn:l=>B.addDoctor(l),onSuccess:(l,a)=>{t.invalidateQueries({queryKey:["clinics"]}),t.invalidateQueries({queryKey:["clinic",a.clinicId]}),t.invalidateQueries({queryKey:["clinic-doctors",a.clinicId]}),j.show({title:"Success",message:"Doctor added successfully",color:"green"})},onError:l=>{j.show({title:"Error",message:l.message||"Failed to add doctor",color:"red"})}}),c=P({mutationFn:l=>B.deleteClinic(l),onSuccess:(l,a)=>{t.invalidateQueries({queryKey:["clinics"]}),j.show({title:"Success",message:"Clinic deleted successfully",color:"green"})},onError:l=>{j.show({title:"Error",message:l.message||"Failed to delete clinic",color:"red"})}}),D=P({mutationFn:l=>B.updateDoctor(l),onSuccess:(l,a)=>{t.invalidateQueries({queryKey:["clinics"]}),t.invalidateQueries({queryKey:["clinic-doctors",a.clinicId]}),j.show({title:"Success",message:"Doctor updated successfully",color:"green"})},onError:l=>{j.show({title:"Error",message:l.message||"Failed to update doctor",color:"red"})}}),g=P({mutationFn:l=>B.deleteDoctor(l),onSuccess:(l,a)=>{t.invalidateQueries({queryKey:["clinics"]}),j.show({title:"Success",message:"Doctor deleted successfully",color:"green"})},onError:l=>{j.show({title:"Error",message:l.message||"Failed to delete doctor",color:"red"})}});return{clinics:s.data||[],clinic:o.data,doctors:e?p.data||[]:m,isLoading:s.isLoading||o.isLoading||p.isLoading,isError:s.isError||o.isError||p.isError,error:s.error||o.error||p.error,createClinic:h.mutateAsync,updateClinic:y.mutateAsync,addDoctor:d.mutateAsync,deleteClinic:c.mutateAsync,updateDoctor:D.mutateAsync,deleteDoctor:g.mutateAsync,isCreating:h.isPending,isUpdating:y.isPending,isAddingDoctor:d.isPending,isDeleting:c.isPending,isUpdatingDoctor:D.isPending,isDeletingDoctor:g.isPending}}var X={exports:{}},yt=X.exports,je;function wt(){return je||(je=1,function(e,t){(function(s,o){e.exports=o()})(yt,function(){var s="minute",o=/[+-]\d\d(?::?\d\d)?/g,p=/([+-]|\d\d)/g;return function(m,h,y){var d=h.prototype;y.utc=function(i){var f={date:i,utc:!0,args:arguments};return new h(f)},d.utc=function(i){var f=y(this.toDate(),{locale:this.$L,utc:!0});return i?f.add(this.utcOffset(),s):f},d.local=function(){return y(this.toDate(),{locale:this.$L,utc:!1})};var c=d.parse;d.parse=function(i){i.utc&&(this.$u=!0),this.$utils().u(i.$offset)||(this.$offset=i.$offset),c.call(this,i)};var D=d.init;d.init=function(){if(this.$u){var i=this.$d;this.$y=i.getUTCFullYear(),this.$M=i.getUTCMonth(),this.$D=i.getUTCDate(),this.$W=i.getUTCDay(),this.$H=i.getUTCHours(),this.$m=i.getUTCMinutes(),this.$s=i.getUTCSeconds(),this.$ms=i.getUTCMilliseconds()}else D.call(this)};var g=d.utcOffset;d.utcOffset=function(i,f){var w=this.$utils().u;if(w(i))return this.$u?0:w(this.$offset)?g.call(this):this.$offset;if(typeof i=="string"&&(i=function(C){C===void 0&&(C="");var Q=C.match(o);if(!Q)return null;var u=(""+Q[0]).match(p)||["-",0,0],$=u[0],z=60*+u[1]+ +u[2];return z===0?0:$==="+"?z:-z}(i),i===null))return this;var A=Math.abs(i)<=16?60*i:i,S=this;if(f)return S.$offset=A,S.$u=i===0,S;if(i!==0){var T=this.$u?this.toDate().getTimezoneOffset():-1*this.utcOffset();(S=this.local().add(A+T,s)).$offset=A,S.$x.$localOffset=T}else S=this.utc();return S};var l=d.format;d.format=function(i){var f=i||(this.$u?"YYYY-MM-DDTHH:mm:ss[Z]":"");return l.call(this,f)},d.valueOf=function(){var i=this.$utils().u(this.$offset)?0:this.$offset+(this.$x.$localOffset||this.$d.getTimezoneOffset());return this.$d.valueOf()-6e4*i},d.isUTC=function(){return!!this.$u},d.toISOString=function(){return this.toDate().toISOString()},d.toString=function(){return this.toDate().toUTCString()};var a=d.toDate;d.toDate=function(i){return i==="s"&&this.$offset?y(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate():a.call(this)};var n=d.diff;d.diff=function(i,f,w){if(i&&this.$u===i.$u)return n.call(this,i,f,w);var A=this.local(),S=y(i).local();return n.call(A,S,f,w)}}})}(X)),X.exports}var xt=wt();const pe=Ee(xt);var ee={exports:{}},Dt=ee.exports,Ae;function jt(){return Ae||(Ae=1,function(e,t){(function(s,o){e.exports=o()})(Dt,function(){var s={year:0,month:1,day:2,hour:3,minute:4,second:5},o={};return function(p,m,h){var y,d=function(l,a,n){n===void 0&&(n={});var i=new Date(l),f=function(w,A){A===void 0&&(A={});var S=A.timeZoneName||"short",T=w+"|"+S,C=o[T];return C||(C=new Intl.DateTimeFormat("en-US",{hour12:!1,timeZone:w,year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:S}),o[T]=C),C}(a,n);return f.formatToParts(i)},c=function(l,a){for(var n=d(l,a),i=[],f=0;f<n.length;f+=1){var w=n[f],A=w.type,S=w.value,T=s[A];T>=0&&(i[T]=parseInt(S,10))}var C=i[3],Q=C===24?0:C,u=i[0]+"-"+i[1]+"-"+i[2]+" "+Q+":"+i[4]+":"+i[5]+":000",$=+l;return(h.utc(u).valueOf()-($-=$%1e3))/6e4},D=m.prototype;D.tz=function(l,a){l===void 0&&(l=y);var n,i=this.utcOffset(),f=this.toDate(),w=f.toLocaleString("en-US",{timeZone:l}),A=Math.round((f-new Date(w))/1e3/60),S=15*-Math.round(f.getTimezoneOffset()/15)-A;if(!Number(S))n=this.utcOffset(0,a);else if(n=h(w,{locale:this.$L}).$set("millisecond",this.$ms).utcOffset(S,!0),a){var T=n.utcOffset();n=n.add(i-T,"minute")}return n.$x.$timezone=l,n},D.offsetName=function(l){var a=this.$x.$timezone||h.tz.guess(),n=d(this.valueOf(),a,{timeZoneName:l}).find(function(i){return i.type.toLowerCase()==="timezonename"});return n&&n.value};var g=D.startOf;D.startOf=function(l,a){if(!this.$x||!this.$x.$timezone)return g.call(this,l,a);var n=h(this.format("YYYY-MM-DD HH:mm:ss:SSS"),{locale:this.$L});return g.call(n,l,a).tz(this.$x.$timezone,!0)},h.tz=function(l,a,n){var i=n&&a,f=n||a||y,w=c(+h(),f);if(typeof l!="string")return h(l).tz(f);var A=function(Q,u,$){var z=Q-60*u*1e3,R=c(z,$);if(u===R)return[z,u];var I=c(z-=60*(R-u)*1e3,$);return R===I?[z,R]:[Q-60*Math.min(R,I)*1e3,Math.max(R,I)]}(h.utc(l,i).valueOf(),w,f),S=A[0],T=A[1],C=h(S).utcOffset(T);return C.$x.$timezone=f,C},h.tz.guess=function(){return Intl.DateTimeFormat().resolvedOptions().timeZone},h.tz.setDefault=function(l){y=l}}})}(ee)),ee.exports}var At=jt();const me=Ee(At);Y.extend(pe);Y.extend(me);const $e=[{day:"Sunday",letter:"S",value:0},{day:"Monday",letter:"M",value:1},{day:"Tuesday",letter:"T",value:2},{day:"Wednesday",letter:"W",value:3},{day:"Thursday",letter:"T",value:4},{day:"Friday",letter:"F",value:5},{day:"Saturday",letter:"S",value:6}],Se=e=>{if(!e||e==="00:00:00")return"";try{const t=Y().format("YYYY-MM-DD");return Y.utc(`${t} ${e}`).tz(Y.tz.guess()).format("HH:mm")}catch(t){return console.error("Error converting UTC to local time:",t),""}},Ie=e=>(e==null?void 0:e.startTime)!=="00:00:00"&&(e==null?void 0:e.endTime)!=="00:00:00",St=()=>{const e={};return $e.forEach(t=>{e[t.day]={isAvailable:!1,from:"",to:""}}),e},vt=(e,t)=>{const s=e.find(p=>p.doctorId===Number(t));if(!s)return console.log(`Doctor ${t} not found in API response`),null;if(!s.workingHours||s.workingHours.length===0)return console.log(`Doctor ${s.doctorName} (ID: ${t}) has no working hours set`),s.message&&console.log(`API Message: ${s.message}`),St();const o={};return $e.forEach(p=>{const m=s.workingHours.find(h=>h.dayOfWeek===p.value);m&&Ie(m)?o[p.day]={isAvailable:!0,from:Se(m.startTime),to:Se(m.endTime)}:o[p.day]={isAvailable:!1,from:"",to:""}}),o},bt=e=>{const t={};return e.forEach(s=>{var m;const o=s.doctorId,p=[];((m=s.workingHours)==null?void 0:m.length)>0?s.workingHours.forEach(h=>{Ie(h)&&p.push(h.dayOfWeek)}):p.push(0,1,2,3,4,5,6),t[o]=p}),t},Fe=()=>L.getAllDoctorsWorkingHours();function Qt(e){const t=re(),s=K({queryKey:["working-hours",e],queryFn:async()=>{const m=await Fe();return vt(m,e)},enabled:!!e,onError:m=>{j.show({title:"Error",message:"Failed to load working hours",color:"red"})}}),o=P({mutationFn:B.updateDoctorWorkingHours,onSuccess:()=>{t.invalidateQueries({queryKey:["working-hours",e]}),t.invalidateQueries({queryKey:["all-doctors-working-hours"]}),j.show({title:"Success",message:"Working hours updated successfully",color:"green"})},onError:m=>{j.show({title:"Error",message:m.message||"Failed to update working hours",color:"red"})}}),p=P({mutationFn:B.createDoctorWorkingHours,onSuccess:()=>{t.invalidateQueries({queryKey:["working-hours",e]}),t.invalidateQueries({queryKey:["all-doctors-working-hours"]}),j.show({title:"Success",message:"Working hours created successfully",color:"green"})},onError:m=>{j.show({title:"Error",message:m.message||"Failed to create working hours",color:"red"})}});return{workingHours:s.data,isLoading:s.isLoading,error:s.error,updateWorkingHours:o.mutate,createWorkingHours:p.mutate,isUpdating:o.isPending,isCreating:p.isPending}}function Ct(){const e=K({queryKey:["all-doctors-working-hours"],queryFn:async()=>{const t=await Fe();return bt(t)},staleTime:3e5,onError:t=>{console.error("Error fetching all doctors working hours:",t)}});return{doctorsWorkingDays:e.data||{},isLoading:e.isLoading,error:e.error}}const Et="http://app8.runasp.net/api",_=de.create({baseURL:Et,headers:{"Content-Type":"application/json"}});_.interceptors.request.use(e=>{const t=localStorage.getItem("access_token");return t&&(e.headers.Authorization=`Bearer ${t}`),e},e=>Promise.reject(e));const V={sendVerificationCode:async e=>{var t,s;try{return(await _.post("/Users/send-verification-code",{email:e})).data}catch(o){throw console.error("Error sending verification code:",o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to send verification code")}},verifyCode:async(e,t)=>{var s,o;try{return(await _.post("/Users/verify-code",{email:e,code:t})).data}catch(p){throw console.error("Error verifying code:",p),new Error(((o=(s=p.response)==null?void 0:s.data)==null?void 0:o.message)||"Failed to verify code")}},getPatients:async()=>{var e,t;try{const s=await _.get("/Users/get-ALL-patients");return s.data.isSuccess&&Array.isArray(s.data.result)?s.data.result:(console.warn("Unexpected response format from get-patients:",s.data),[])}catch(s){throw console.error("Error fetching patients:",s),new Error(((t=(e=s.response)==null?void 0:e.data)==null?void 0:t.message)||"Failed to fetch patients")}},banPatient:async e=>{var t,s;try{return(await _.post(`/Users/ban/${e}`)).data}catch(o){throw console.error("Error banning patient:",o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to ban patient")}},unbanPatient:async e=>{var t,s;try{return(await _.post(`/Users/unban/${e}`)).data}catch(o){throw console.error("Error unbanning patient:",o),new Error(((s=(t=o.response)==null?void 0:t.data)==null?void 0:s.message)||"Failed to unban patient")}},getResetToken:async e=>{var t,s,o;try{console.log("Getting reset token for email:",e);const p=await _.post("/Users/reset-token",JSON.stringify(e));return console.log("Reset token response:",p.data),p.data}catch(p){throw console.error("Error getting reset token:",p),console.error("Error response data:",(t=p.response)==null?void 0:t.data),new Error(((o=(s=p.response)==null?void 0:s.data)==null?void 0:o.message)||"Failed to get reset token")}},resetPassword:async e=>{var t,s,o,p,m,h,y,d,c,D;try{console.log("Reset Password Request Body:",e);const g=await _.post("/Users/ResetPassword",e);return console.log("Reset Password Response:",g.data),g.data}catch(g){throw console.error("Error resetting password:",g),console.error("Error response data:",(t=g.response)==null?void 0:t.data),console.error("Full error response:",g.response),(o=(s=g.response)==null?void 0:s.data)!=null&&o.errors&&console.error("API validation errors:",g.response.data.errors),new Error(((m=(p=g.response)==null?void 0:p.data)==null?void 0:m.message)||((y=(h=g.response)==null?void 0:h.data)==null?void 0:y.messages)||(((D=(c=(d=g.response)==null?void 0:d.data)==null?void 0:c.errors)==null?void 0:D.length)>0?g.response.data.errors.join(", "):"Failed to reset password"))}},deleteAccount:async(e,t)=>{var s,o,p;try{console.log("Delete Account Request - Email:",e,"ID:",t);const m=await _.delete(`/Users/delete-user?email=${e}&id=${t}`);return console.log("Delete Account Response:",m.data),m.data}catch(m){throw console.error("Error deleting account:",m),console.error("Error response data:",(s=m.response)==null?void 0:s.data),new Error(((p=(o=m.response)==null?void 0:o.data)==null?void 0:p.message)||"Failed to delete account")}}};function Pt(){const e=re(),t=K({queryKey:["patients"],queryFn:V.getPatients,initialData:[],refetchOnMount:!0,staleTime:0,cacheTime:1e3*60*5}),s=P({mutationFn:V.banPatient,onMutate:async d=>{await e.cancelQueries({queryKey:["patients"]});const c=e.getQueryData(["patients"]);return e.setQueryData(["patients"],D=>D.map(g=>g.id===d?{...g,isBanned:!0}:g)),{previousPatients:c}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),j.show({title:"Success",message:"Patient has been banned",color:"red"})},onError:(d,c,D)=>{e.setQueryData(["patients"],D.previousPatients),j.show({title:"Error",message:d.message||"Failed to ban patient",color:"red"})}}),o=P({mutationFn:V.unbanPatient,onMutate:async d=>{await e.cancelQueries({queryKey:["patients"]});const c=e.getQueryData(["patients"]);return e.setQueryData(["patients"],D=>D.map(g=>g.id===d?{...g,isBanned:!1}:g)),{previousPatients:c}},onSuccess:()=>{e.invalidateQueries({queryKey:["patients"]}),j.show({title:"Success",message:"Patient has been unbanned",color:"green"})},onError:(d,c,D)=>{e.setQueryData(["patients"],D.previousPatients),j.show({title:"Error",message:d.message||"Failed to unban patient",color:"red"})}}),p=P({mutationFn:V.getResetToken,onError:d=>{j.show({title:"Error",message:d.message||"Failed to get reset token",color:"red"})}}),m=P({mutationFn:V.resetPassword,onError:d=>{j.show({title:"Error",message:d.message||"Failed to reset password",color:"red"})}}),h=P({mutationFn:async d=>{try{const c=await V.getResetToken(d.email),D=(c==null?void 0:c.token)||c;if(!D)throw new Error("Failed to get reset token");const g={email:d.email,oldPassword:d.oldPassword,newPassword:d.newPassword,confirmNewPassword:d.confirmNewPassword,Token:D};return await V.resetPassword(g)}catch(c){throw c}},onSuccess:()=>{j.show({title:"Success",message:"Password reset successfully",color:"green"})},onError:d=>{j.show({title:"Error",message:d.message||"Failed to reset password",color:"red"})}}),y=P({mutationFn:({email:d,id:c})=>V.deleteAccount(d,c),onSuccess:()=>{j.show({title:"Success",message:"Account deleted successfully",color:"green"})},onError:d=>{j.show({title:"Error",message:d.message||"Failed to delete account",color:"red"})}});return{patients:t.data||[],isLoading:t.isLoading,isError:t.isError,error:t.error,refetch:t.refetch,banPatient:s.mutate,unbanPatient:o.mutate,getResetToken:p.mutate,resetPassword:m.mutate,resetPasswordWithToken:h.mutate,deleteAccount:y.mutate,isGettingResetToken:p.isPending,isResettingPassword:h.isPending,isDeletingAccount:y.isPending}}Y.extend(pe);Y.extend(me);function Ne({onSubmit:e,isLoading:t,initialValues:s=null}){const{doctors:o}=ke(),{patients:p,isLoading:m}=Pt(),{doctorsWorkingDays:h}=Ct(),[y,d]=k.useState("new"),c=We({initialValues:s||{doctorId:"",patientId:"",firstName:"",lastName:"",email:"",phoneNumber:"",address:"",startTime:null,endTime:null,notes:""},validate:{doctorId:a=>a?null:"Please select a doctor",patientId:a=>y==="existing"&&!a?"Please select a patient":null,firstName:a=>y==="new"&&!(a!=null&&a.trim())?"First name is required":null,lastName:a=>y==="new"&&!(a!=null&&a.trim())?"Last name is required":null,email:a=>y==="new"?a!=null&&a.trim()?/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(a)?null:"Invalid email format":"Email is required":null,phoneNumber:a=>y==="new"&&!(a!=null&&a.trim())?"Phone number is required":null,address:a=>y==="new"&&!(a!=null&&a.trim())?"Address is required":null,startTime:a=>a?null:"Please select appointment start time",endTime:a=>a?null:"Please select appointment end time"}});k.useEffect(()=>{if(c.values.startTime){const a=new Date(c.values.startTime);a.setMinutes(a.getMinutes()+30),c.setFieldValue("endTime",a)}},[c.values.startTime]),k.useEffect(()=>{y==="existing"?c.setValues({...c.values,firstName:"",lastName:"",email:"",phoneNumber:"",address:"",patientId:""}):c.setValues({...c.values,patientId:""})},[y]);const D=a=>{if(!c.values.doctorId||!h)return!1;const n=parseInt(c.values.doctorId),i=h[n]||[];if(i.length===0)return!1;const f=Y(a).day();return!i.includes(f)},g=a=>{if(!a)return null;const i=new Date(a).toISOString();return console.log("Converting date:",a,"to ISO:",i),i},l=a=>{console.log("Form values before processing:",{startTime:a.startTime,endTime:a.endTime,patientType:y,values:a});let n;y==="existing"?n={startDate:g(a.startTime),endDate:g(a.endTime),notes:a.notes?a.notes.trim():"",doctorId:parseInt(a.doctorId),userId:a.patientId}:n={firstName:a.firstName.trim(),lastName:a.lastName.trim(),email:a.email.trim(),phoneNumber:a.phoneNumber.trim(),address:a.address.trim(),startDate:g(a.startTime),endDate:g(a.endTime),notes:a.notes?a.notes.trim():"",doctorId:parseInt(a.doctorId)},n.patientType=y,console.log("Submitting appointment data:",n),e(n)};return r.jsx("form",{onSubmit:c.onSubmit(l),children:r.jsxs(W,{pos:"relative",children:[r.jsx(Qe,{visible:t}),r.jsx(ce,{radius:"md",label:"Doctor",placeholder:"Select a doctor",data:o.map(a=>({value:a.id.toString(),label:`${a.name} (${a.clinicName})`})),searchable:!0,required:!0,...c.getInputProps("doctorId")}),r.jsx(le,{label:"Patient Details",labelPosition:"center"}),r.jsx(Le,{children:r.jsx(ve,{radius:"md",value:y,onChange:d,data:[{label:"New Patient",value:"new"},{label:"Existing Patient",value:"existing"}],fullWidth:!0})}),y==="existing"?r.jsx(ce,{radius:"md",label:"Select Patient",placeholder:"Choose an existing patient",data:p.map(a=>({value:a.id,label:a.fullName+" - "+a.email})),searchable:!0,required:!0,disabled:m,...c.getInputProps("patientId")}):r.jsxs(r.Fragment,{children:[r.jsxs(E,{grow:!0,children:[r.jsx(Z,{radius:"md",label:"First Name",placeholder:"Enter patient first name",required:!0,...c.getInputProps("firstName")}),r.jsx(Z,{radius:"md",label:"Last Name",placeholder:"Enter patient last name",required:!0,...c.getInputProps("lastName")})]}),r.jsx(Z,{radius:"md",label:"Email",placeholder:"Enter patient email",type:"email",required:!0,...c.getInputProps("email")}),r.jsx(Z,{radius:"md",label:"Phone Number",placeholder:"Enter patient phone number",required:!0,...c.getInputProps("phoneNumber")}),r.jsx(Z,{radius:"md",label:"Address",placeholder:"Enter patient address",required:!0,...c.getInputProps("address")})]}),r.jsx(le,{label:"Appointment Details",labelPosition:"center"}),r.jsxs(E,{grow:!0,children:[r.jsx(xe,{firstDayOfWeek:0,radius:"md",timePickerProps:{withDropdown:!0,popoverProps:{withinPortal:!1},format:"12h",withSeconds:!1},label:"Start Time",placeholder:"Appointment start time",required:!0,clearable:!0,valueFormat:"DD MMM YYYY hh:mm A",minDate:new Date,excludeDate:D,weekendDays:[5],...c.getInputProps("startTime")}),r.jsx(xe,{firstDayOfWeek:0,radius:"md",timePickerProps:{withDropdown:!0,popoverProps:{withinPortal:!1},format:"12h"},label:"End Time",placeholder:"Appointment end time",required:!0,clearable:!0,valueFormat:"DD MMM YYYY hh:mm A",minDate:c.values.startTime||new Date,excludeDate:D,weekendDays:[],...c.getInputProps("endTime")})]}),r.jsx(He,{radius:"md",label:"Notes",placeholder:"Add any notes about the appointment",...c.getInputProps("notes")}),r.jsx(E,{justify:"flex-end",mt:"md",children:r.jsx(G,{type:"submit",loading:t,radius:"md",children:s?"Update Appointment":"Create Appointment"})})]})})}function Tt({opened:e,onClose:t}){const{createAppointmentWithPatient:s,createAppointment:o}=ue(),p=async h=>{var y,d,c,D,g,l,a;try{let n;const i=h.patientType==="new";if(i){const{patientType:f,...w}=h;n=await s.mutateAsync(w)}else{const{patientType:f,...w}=h;n=await o.mutateAsync(w)}if(i&&n.userCreated&&n.temporaryPassword){const f=r.jsxs(W,{gap:"xs",children:[r.jsx(q,{size:"sm",children:"Appointment created successfully! A new patient account has been created."}),r.jsxs(E,{gap:"xs",align:"center",children:[r.jsx(q,{size:"sm",fw:500,children:"Temporary Password:"}),r.jsx(Ke,{children:n.temporaryPassword}),r.jsx(Ye,{value:n.temporaryPassword,children:({copied:w,copy:A})=>r.jsx(Re,{label:w?"Copied":"Copy password",children:r.jsx(te,{color:w?"teal":"blue",onClick:A,size:"sm",variant:"light",children:w?r.jsx(ot,{size:16}):r.jsx(nt,{size:16})})})})]}),r.jsx(q,{size:"xs",c:"dimmed",children:"Please share this password with the patient so they can log in."})]});j.show({title:"Success",message:f,color:"green",autoClose:!1})}else j.show({title:"Success",message:"Appointment created successfully",color:"green"});t()}catch(n){console.error("Full error object:",n);let i="Failed to create appointment";if((d=(y=n.response)==null?void 0:y.data)!=null&&d.error)i=n.response.data.error;else if((D=(c=n.response)==null?void 0:c.data)!=null&&D.message){if(i=n.response.data.message,n.response.data.errors&&Array.isArray(n.response.data.errors)){const f=n.response.data.errors.find(w=>w.code==="DuplicateUserName"||w.code==="DuplicateEmail");if(f)i=`${n.response.data.message}: ${f.description}. Please try with a different email address.`;else{const w=n.response.data.errors.map(A=>A.description);i=`${n.response.data.message}: ${w.join(", ")}`}}}else(l=(g=n.response)==null?void 0:g.data)!=null&&l.errors?i=Object.values(n.response.data.errors).flat().join(", "):(a=n.response)!=null&&a.data?i=JSON.stringify(n.response.data):n.message&&(i=n.message);j.show({title:"Error",message:i,color:"red",autoClose:!1})}},m=s.isPending||o.isPending;return r.jsx(be,{radius:"md",overlayProps:{opacity:.4},opened:e,onClose:t,title:"Create New Appointment",position:"right",size:"md",children:r.jsx(Ne,{onSubmit:p,isLoading:m})})}function kt({opened:e,onClose:t,appointment:s,onEdit:o,onDelete:p}){const m=st();if(!s)return null;const h=s.status,y={0:"Scheduled",1:"Cancelled",2:"Completed",3:"No Show"},d={0:"blue",1:"red",2:"green",3:"orange"};return r.jsx(be,{offset:25,radius:"md",shadow:"xl",overlayProps:{opacity:.2},opened:e,onClose:t,styles:{header:{display:"flex",justifyContent:"space-between",alignItems:"center",borderBottom:"1px solid var(--mantine-color-gray-3)"},title:{display:"flex",justifyContent:"space-between",alignItems:"center",flexGrow:1}},title:r.jsxs(r.Fragment,{children:[r.jsx(Ce,{size:"md",p:"sm",color:d[h],children:y[h]}),r.jsxs(E,{gap:0,justify:"end",children:[r.jsx(te,{radius:"md",variant:"subtle",size:"lg",onClick:o,color:"dimmed",children:r.jsx(Pe,{size:20})}),r.jsx(te,{radius:"md",variant:"subtle",size:"lg",onClick:p,color:"dimmed",children:r.jsx(Te,{size:20})})]})]}),position:"right",size:"md",scrollAreaComponent:Be.Autosize,children:r.jsxs(W,{gap:"xs",mt:"md",children:[r.jsxs(E,{justify:"space-between",gap:"md",style:{cursor:"pointer"},onClick:()=>{s.patientId?m(`/patients/${s.patientId}`):console.error("No patient ID available for navigation")},children:[r.jsxs(E,{children:[r.jsx(_e,{color:"#e7edf6",style:{cursor:"pointer"},onClick:()=>{s.patientId?m(`/patients/${s.patientId}`):console.error("No patient ID available for navigation")},size:"md",radius:"xl",variant:"filled",children:r.jsx(q,{fz:"sm",children:s.patientName.split(" ").map(c=>c[0]).join("").toUpperCase()})}),r.jsxs(W,{gap:"0",c:"dimmed",children:[r.jsx(q,{size:"lg",fw:700,children:s.patientName}),r.jsxs(E,{gap:"4",c:"dimmed",children:[r.jsx(at,{size:16}),r.jsx(q,{size:"sm",c:"dimmed",children:"00000fixMe000"})]})]})]}),r.jsx(it,{stroke:1.5,size:24})]}),r.jsx(le,{my:"8"}),r.jsxs(W,{children:[r.jsxs(E,{gap:"xs",c:"dimmed",align:"start",children:[r.jsx(ct,{size:24,color:"black"}),r.jsxs(W,{gap:"0",children:[r.jsx(q,{fw:500,children:s.time}),r.jsx(q,{fw:500,c:"dimmed",children:s.displayDate||s.date})]})]}),r.jsxs(E,{gap:"xs",c:"dimmed",align:"start",children:[r.jsx(lt,{size:24,color:"black"}),r.jsxs(W,{gap:"0",children:[r.jsx(q,{fw:500,children:s.clinicName}),r.jsxs(q,{fw:500,c:"dimmed",children:["Dr. ",s.doctorName]})]})]}),r.jsxs(E,{align:"start",gap:"xs",c:"dimmed",children:[r.jsx(dt,{size:24,color:"black"}),r.jsxs(W,{gap:"0",children:[r.jsx(q,{fw:500,children:"Notes"}),r.jsx(q,{fw:500,c:"dimmed",children:s.notes})]})]})]}),r.jsx(E,{justify:"flex-end",mt:"md"})]})})}const $t=e=>{const t=new Date,s=new Date(t.setHours(0,0,0,0));switch(e){case"today":return[s,new Date(t.setHours(23,59,59,999))];case"this-week":{const o=new Date(s);o.setDate(o.getDate()-o.getDay());const p=new Date(o);return p.setDate(p.getDate()+6),p.setHours(23,59,59,999),[o,p]}case"this-month":{const o=new Date(t.getFullYear(),t.getMonth(),1),p=new Date(t.getFullYear(),t.getMonth()+1,0,23,59,59,999);return[o,p]}default:return[null,null]}},ie=e=>{if(!e)return null;const t=new Date(e);return t.setHours(0,0,0,0),t};function It({searchQuery:e,hasFilters:t}){const s=()=>e?"No appointments found matching your search":t?"No appointments found with the current filters":"No appointments found";return r.jsx(v.Tr,{children:r.jsx(v.Td,{colSpan:7,children:r.jsx(Ze,{h:100,children:r.jsx(W,{align:"center",gap:"md",children:r.jsx(q,{size:"lg",fw:500,c:"dimmed",children:s()})})})})})}function Ft({appointments:e=[],onAppointmentClick:t,searchQuery:s=""}){var ye,we;const[o,p]=k.useState("all"),[m,h]=k.useState([null,null]),[y,d]=k.useState(!1),[c,D]=k.useState(null),[g,l]=k.useState(!1),[a,n]=k.useState(!1),[i,f]=k.useState(!1),[w,A]=k.useState(e),[S,T]=k.useState(1),C=20,{updateAppointment:Q,deleteAppointment:u,updateAppointmentStatus:$}=ue(),z={0:"Scheduled",1:"Cancelled",2:"Completed",3:"No Show"},R={0:"blue",1:"red",2:"green",3:"orange"};k.useEffect(()=>{A(e)},[e]);const I=x=>{const b=$t(x);h(b)},se=()=>{if(!m[0]||!m[1])return"Date Range";const x=O=>!O||!(O instanceof Date)?"":O.toLocaleDateString("en-US",{month:"short",day:"numeric",year:"numeric"}),b=x(m[0]),M=x(m[1]);return!b||!M?"Date Range":`${b} - ${M}`},he=x=>{D(x),l(!0)},qe=async x=>{try{await u.mutateAsync(x),j.show({title:"Success",message:"Appointment deleted successfully",color:"green"})}catch(b){j.show({title:"Error",message:b.message||"Failed to delete appointment",color:"red"})}},ze=async x=>{try{await Q.mutateAsync({id:c.id,...x}),j.show({title:"Success",message:"Appointment updated successfully",color:"green"}),l(!1)}catch(b){j.show({title:"Error",message:b.message||"Failed to update appointment",color:"red"})}};k.useEffect(()=>{const x=e.filter(b=>{var O;if(!(o==="all"||b.status===parseInt(o)))return!1;if(s){const U=s.toLowerCase().trim();if(![b.patientName,(O=b.id)==null?void 0:O.toString()].some(ae=>ae==null?void 0:ae.toLowerCase().includes(U)))return!1}if(!m[0]||!m[1])return!0;try{const U=ie(new Date(b.date)),oe=ie(m[0]),ne=ie(m[1]);return!U||!oe||!ne?!0:U>=oe&&U<=ne}catch(U){return console.error("Error filtering appointment date:",U),!0}});A(x),T(1)},[e,o,s,m]);const Me=Math.ceil(w.length/C),ge=(S-1)*C,Oe=ge+C,fe=w.slice(ge,Oe),J=async(x,b)=>{try{const M=await $.mutateAsync({appointmentId:x,newStatus:b});j.show({title:"Success",message:M.message||"Appointment status updated successfully",color:"green"});const O=w.map(U=>U.id===x?{...U,status:M.newStatus}:U);A(O)}catch(M){j.show({title:"Error",message:M.message||"Failed to update appointment status",color:"red"})}},Ue=x=>{D(x),f(!0),t&&t(x)};return r.jsxs(W,{children:[r.jsx(E,{mt:"sm",justify:"start",w:"100%",mb:"md",children:r.jsxs(E,{gap:"md",children:[r.jsx(ve,{size:"md",radius:"md",value:o,onChange:p,data:[{label:"All",value:"all"},{label:"Scheduled",value:"0"},{label:"Completed",value:"2"},{label:"Cancelled",value:"1"},{label:"No Show",value:"3"}]}),r.jsxs(F,{shadow:"md",radius:"lg",opened:y,onChange:d,position:"bottom-start",width:"targetWidth",children:[r.jsx(F.Target,{children:r.jsx(G,{size:"md",radius:"md",variant:"subtle",rightSection:r.jsx(ut,{color:"black",size:18}),children:se()})}),r.jsx(F.Dropdown,{p:"md",children:r.jsxs(W,{gap:"xs",children:[r.jsxs(E,{py:"sm",w:"100%",justify:"left",children:[r.jsx(G,{size:"sm",radius:"md",variant:"subtle",onClick:()=>I("today"),children:"Today"}),r.jsx(G,{size:"sm",radius:"md",variant:"subtle",onClick:()=>I("this-week"),children:"This Week"}),r.jsx(G,{radius:"md",size:"sm",variant:"subtle",onClick:()=>I("this-month"),children:"This Month"})]}),r.jsx(Ve,{size:"sm",type:"range",value:m,onChange:x=>{const[b,M]=x;if(b&&M){const O=new Date(M);O.setHours(23,59,59,999),h([b,O])}else h(x)},numberOfColumns:2})]})})]})]})}),r.jsxs(v,{verticalSpacing:"sm",highlightOnHover:!0,children:[r.jsx(v.Thead,{children:r.jsxs(v.Tr,{children:[r.jsx(v.Th,{children:"ID"}),r.jsx(v.Th,{children:"Patient"}),r.jsx(v.Th,{children:"Doctor"}),r.jsx(v.Th,{children:"Clinic"}),r.jsx(v.Th,{children:"Date"}),r.jsx(v.Th,{children:"Time"}),r.jsx(v.Th,{children:"Status"})]})}),r.jsx(v.Tbody,{children:fe.length===0?r.jsx(It,{searchQuery:s,hasFilters:o!=="all"||m[0]&&m[1]}):fe.map(x=>{const b=x.status,M=z[b]||"Scheduled",O=R[b]||"blue";return r.jsxs(v.Tr,{style:{cursor:"pointer"},onClick:()=>Ue(x),children:[r.jsx(v.Td,{children:x.id}),r.jsx(v.Td,{children:x.patientName}),r.jsx(v.Td,{children:x.doctorName}),r.jsx(v.Td,{children:x.clinicName}),r.jsx(v.Td,{children:x.displayDate||x.date}),r.jsx(v.Td,{children:x.time}),r.jsx(v.Td,{children:r.jsx(Ce,{size:"md",color:O,children:M})}),r.jsx(v.Td,{children:r.jsx(E,{gap:"xs",onClick:U=>U.stopPropagation(),children:r.jsxs(F,{shadow:"md",width:200,children:[r.jsx(F.Target,{children:r.jsx(te,{variant:"subtle",color:"gray",children:r.jsx(pt,{size:16})})}),r.jsxs(F.Dropdown,{children:[r.jsx(F.Label,{children:"Update Status"}),r.jsx(F.Item,{onClick:()=>J(x.id,0),color:"blue",children:"Mark as Scheduled"}),r.jsx(F.Item,{onClick:()=>J(x.id,1),color:"red",children:"Mark as Cancelled"}),r.jsx(F.Item,{onClick:()=>J(x.id,2),color:"green",children:"Mark as Completed"}),r.jsx(F.Item,{onClick:()=>J(x.id,3),color:"orange",children:"Mark as No Show"}),r.jsx(F.Divider,{}),r.jsx(F.Label,{children:"Actions"}),r.jsx(F.Item,{leftSection:r.jsx(Pe,{size:14}),onClick:()=>he(x),children:"Edit"}),r.jsx(F.Item,{leftSection:r.jsx(Te,{size:14}),color:"red",onClick:()=>{D(x),n(!0)},children:"Delete"})]})]})})})]},x.id)})})]}),w.length>0&&r.jsx(E,{justify:"center",mt:"lg",children:r.jsx(Ge,{value:S,onChange:T,total:Me,size:"sm",radius:"md"})}),r.jsx(De,{opened:g,onClose:()=>l(!1),title:"Edit Appointment",size:"lg",children:c&&r.jsx(Ne,{initialValues:{doctorId:(we=(ye=c.doctor)==null?void 0:ye.id)==null?void 0:we.toString(),patientName:c.patientName,patientPhone:c.patientPhone||"",startTime:new Date(c.rawDate),notes:c.notes||""},onSubmit:ze,isLoading:Q.isPending})}),r.jsx(De,{opened:a,onClose:()=>n(!1),title:"Delete Appointment",size:"sm",children:r.jsxs(W,{children:[r.jsxs(q,{children:["Are you sure you want to delete this appointment for"," ",c==null?void 0:c.patientName,"?"]}),r.jsxs(E,{justify:"flex-end",mt:"md",children:[r.jsx(G,{variant:"light",onClick:()=>n(!1),children:"Cancel"}),r.jsx(G,{color:"red",loading:u.isPending,onClick:()=>{qe(c.id),n(!1)},children:"Delete"})]})]})}),r.jsx(kt,{opened:i,onClose:()=>f(!1),appointment:c,onEdit:()=>{f(!1),l(!0)},onDelete:()=>{f(!1),n(!0)}})]})}Y.extend(pe);Y.extend(me);function Nt(){const[e,t]=k.useState(null),[s,o]=k.useState(null),{searchQuery:p}=ht(),[m,{open:h,close:y}]=Je(!1),{clinics:d,doctors:c,isLoading:D,error:g}=ke(),{appointments:l,isLoadingAppointments:a,appointmentsError:n,getAppointmentsByClinic:i,getAppointmentsByDoctor:f}=ue(),{data:w}=i(e),{data:A}=f(s),S=s?A:e?w:l,T=k.useCallback(u=>{if(!u||u==="all")t(null),o(null);else if(u.startsWith("clinic-")){const $=u.replace("clinic-","");t($),o(null)}else if(u.startsWith("doctor-")){const $=u.replace("doctor-","");o($),t(null)}},[]),C=[{group:"General",items:[{value:"all",label:"All Appointments"}]},{group:"Clinics",items:d.map(u=>({value:`clinic-${u.id}`,label:u.name}))},{group:"Doctors",items:c.map(u=>({value:`doctor-${u.id}`,label:`${u.name} (${u.clinicName})`}))}],Q=(S||[]).map(u=>{var $,z,R;try{const I=u.startDate?Y.utc(u.startDate).tz(Y.tz.guess()):null;if(!I||!I.isValid())return{...u,id:u.id,patientName:u.patientName,doctorName:(($=u.doctor)==null?void 0:$.name)||"N/A",clinicName:u.clinicName||"N/A",date:"Invalid Date",time:"Invalid Time",status:u.status!==void 0?u.status:0,doctor:u.doctor,userId:u.userId,patientId:u.patientId};const se=I.format("YYYY-MM-DD");return{id:u.id,patientName:u.patientName,doctorName:((z=u.doctor)==null?void 0:z.name)||"N/A",clinicName:u.clinicName||"N/A",rawDate:I.toDate(),date:se,displayDate:I.format("MMM D, YYYY"),time:I.format("hh:mm A"),status:u.status!==void 0?u.status:0,doctor:u.doctor,patientPhone:u.patientPhone,notes:u.notes,userId:u.userId,patientId:u.patientId}}catch(I){return console.error("Error formatting appointment:",I),{...u,id:u.id,patientName:u.patientName,doctorName:((R=u.doctor)==null?void 0:R.name)||"N/A",clinicName:u.clinicName||"N/A",date:"Error",displayDate:"Error",time:"Error",status:u.status!==void 0?u.status:0,doctor:u.doctor,userId:u.userId,patientId:u.patientId}}});return r.jsx(Xe,{pt:12,fluid:!0,maw:1232,children:r.jsxs(W,{children:[r.jsx(et,{fz:"24px",order:2,children:"Appointments"}),r.jsxs(E,{mt:40,justify:"space-between",children:[r.jsx(ce,{w:200,size:"lg",radius:"md",data:C,placeholder:"Select clinic or doctor",disabled:D,error:g==null?void 0:g.message,onChange:T,value:s?`doctor-${s}`:e?`clinic-${e}`:"all",comboboxProps:{width:500,position:"bottom-start"},styles:{dropdown:{borderRadius:"var(--mantine-radius-md)",boxShadow:"var(--mantine-shadow-md)",minWidth:"200px"}}}),r.jsx(G,{onClick:h,leftSection:r.jsx(mt,{size:16}),variant:"outline",size:"lg",radius:"xl",children:"New Appointment"})]}),r.jsx(tt,{withBorder:!0,radius:"md",p:"md",children:a?r.jsx("div",{children:"Loading appointments..."}):n?r.jsxs("div",{children:["Error loading appointments: ",n.message]}):r.jsx(Ft,{appointments:Q,searchQuery:p})}),r.jsx(Tt,{opened:m,onClose:y})]})})}const Lt=Object.freeze(Object.defineProperty({__proto__:null,default:Nt},Symbol.toStringTag,{value:"Module"}));export{kt as A,Tt as C,$e as D,Qt as a,pe as b,ht as c,ue as d,Ct as e,Pt as f,Lt as g,me as t,ke as u};
