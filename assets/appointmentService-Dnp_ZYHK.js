import{aL as t,aM as a,aN as e}from"./index-BwajA8ZI.js";const n=t.create({baseURL:"http://app8.runasp.net/api",headers:{"Content-Type":"application/json"}});n.interceptors.request.use(t=>{const e=a();return e&&(t.headers.Authorization=`Bearer ${e}`),t},t=>Promise.reject(t)),n.interceptors.response.use(t=>t,t=>{var a;return 401===(null==(a=t.response)?void 0:a.status)&&e(),Promise.reject(t)});const r={getAllAppointments:async()=>{try{const t=await n.get("/Appointment/get-all-appointments-with-status");return Array.isArray(t.data)?t.data:[]}catch(t){throw t}},getAppointmentById:async t=>{try{return(await n.get(`/Appointment/get-by-id-Appointments/${t}`)).data}catch(a){throw a}},createAppointment:async t=>{try{return(await n.post("/Appointment/create",t)).data}catch(a){throw a}},createAppointmentWithPatient:async t=>{var a,e;try{return(await n.post("/Appointment/create-with-patient",t)).data}catch(r){throw null==(a=r.response)||a.data,null==(e=r.response)||e.status,r}},updateAppointment:async t=>{try{return void(await n.put("/Appointment/update",t))}catch(a){throw a}},deleteAppointment:async t=>{try{return void(await n.delete(`/Appointment/delete-Appointments/${t}`))}catch(a){throw a}},getAppointmentsByClinic:async t=>{try{const a=await n.get(`/Appointment/get-Appointments-by-clinic/${t}`);return Array.isArray(a.data)?a.data:[]}catch(a){throw a}},getAppointmentsByDoctor:async t=>{try{const a=await n.get(`/Appointment/get-Appointments-by-doctor/${t}`);return Array.isArray(a.data)?a.data:[]}catch(a){throw a}},getAppointmentsByUser:async t=>{try{const a=await n.get(`/Appointment/get-Appointments-by-user/${t}`);return Array.isArray(a.data)?a.data:[]}catch(a){throw a}},getAvailableDoctors:async()=>{try{const t=await n.get("/Appointment/get-available-doctors");return Array.isArray(t.data)?t.data:[]}catch(t){throw t}},getAllDoctorsWorkingHours:async()=>{try{const t=await n.get("/Appointment/all-doctors-working-hours");return Array.isArray(t.data)?t.data:[]}catch(t){throw t}},updateAppointmentStatus:async(t,a)=>{try{return(await n.put(`/Appointment/update-status/${t}?newStatus=${a}`)).data}catch(e){throw e}},getAppointmentStatus:async t=>{try{return(await n.get(`/Appointment/status-only/${t}`)).data}catch(a){throw a}},getAvailableSlots:async(t,a)=>{try{const e=new URLSearchParams;a.id&&e.append("id",a.id),e.append("from",a.from),e.append("to",a.to);return(await n.get(`/Appointment/doctors/${t}/available-slots?${e.toString()}`)).data}catch(e){throw e}}};export{r as a};
