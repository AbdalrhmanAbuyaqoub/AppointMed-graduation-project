import{u}from"./useQuery-B3rl-HGt.js";import{aN as D,aO as F,aP as f,aM as q,E as c}from"./index-BG_Rz9Kc.js";import{u as d}from"./useMutation-MLE0ngmp.js";const S="http://app8.runasp.net/api",n=D.create({baseURL:S,headers:{"Content-Type":"application/json"}});n.interceptors.request.use(o=>{const r=F();return r&&(o.headers.Authorization=`Bearer ${r}`),o},o=>Promise.reject(o));n.interceptors.response.use(o=>o,o=>{var r;return((r=o.response)==null?void 0:r.status)===401&&f(),Promise.reject(o)});const a={getAllClinics:async()=>{try{const o=await n.get("/Clinic/get-all");return Array.isArray(o.data)?o.data:[]}catch(o){return console.error("Error fetching clinics:",o),[]}},getClinicById:async o=>{var r,t;try{return(await n.get(`/Clinic/get-by-id/${o}`)).data}catch(e){throw console.error(`Error fetching clinic ${o}:`,e),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to fetch clinic")}},getDoctors:async o=>{var r,t;try{const e=await n.get(`/Clinic/get-doctors/${o}`);return Array.isArray(e.data)?e.data:[]}catch(e){throw console.error(`Error fetching doctors for clinic ${o}:`,e),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to fetch doctors")}},createClinic:async o=>{var r,t;try{return(await n.post("/Clinic/create",o)).data}catch(e){throw console.error("Error creating clinic:",e),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to create clinic")}},updateClinic:async o=>{var r,t;try{await n.put("/Clinic/update",o);return}catch(e){throw console.error("Error updating clinic:",e),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to update clinic")}},addDoctor:async o=>{var r,t;try{return(await n.post("/Clinic/add-doctor",o)).data}catch(e){throw console.error("Error adding doctor:",e),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to add doctor")}},deleteClinic:async o=>{var r,t;try{await n.delete(`/Clinic/delete/${o}`);return}catch(e){throw new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to delete clinic")}},updateDoctor:async o=>{var r,t;try{await n.put("/Clinic/update-doctor",o);return}catch(e){throw console.error("Error updating doctor:",e),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to update doctor")}},deleteDoctor:async o=>{var r,t;try{await n.delete(`/Clinic/delete-doctor/${o}`);return}catch(e){throw console.error("Error deleting doctor:",e),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to delete doctor")}},updateDoctorWorkingHours:async o=>{var r,t;try{console.log("Updating working hours with payload:",JSON.stringify(o));const e=await n.put("/Clinic/update-working-hours-doctor",o);return console.log("Server response:",e.data),e.data}catch(e){throw console.error("Error updating doctor working hours:",e),e.response&&console.error("Server error response:",e.response.data),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to update working hours")}},createDoctorWorkingHours:async o=>{var r,t;try{console.log("Adding working hours with payload:",JSON.stringify(o));const e=await n.post("/Clinic/add-working-hours-doctor",o);return console.log("Server response:",e.data),e.data}catch(e){throw console.error("Error adding doctor working hours:",e),e.response&&console.error("Server error response:",e.response.data),new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to add working hours")}}};function K(o){const r=q(),t=u({queryKey:["clinics"],queryFn:a.getAllClinics,initialData:[],refetchOnMount:!0,staleTime:0,cacheTime:1e3*60*5}),e=u({queryKey:["clinic",o],queryFn:()=>a.getClinicById(o),enabled:!!o}),l=u({queryKey:["clinic-doctors",o],queryFn:()=>a.getDoctors(o),enabled:!!o}),E=(t.data||[]).reduce((s,i)=>i.doctors?[...s,...i.doctors.map(C=>({...C,clinicId:i.id,clinicName:i.name}))]:s,[]),g=d({mutationFn:s=>a.createClinic(s),onSuccess:s=>{r.invalidateQueries({queryKey:["clinics"]}),c.show({title:"Success",message:"Clinic created successfully",color:"green"})},onError:s=>{c.show({title:"Error",message:s.message||"Failed to create clinic",color:"red"})}}),y=d({mutationFn:s=>a.updateClinic(s),onSuccess:(s,i)=>{r.invalidateQueries({queryKey:["clinics"]}),r.invalidateQueries({queryKey:["clinic",i.id]}),r.invalidateQueries({queryKey:["clinic-doctors",i.id]}),c.show({title:"Success",message:"Clinic updated successfully",color:"green"})},onError:s=>{c.show({title:"Error",message:s.message||"Failed to update clinic",color:"red"})}}),p=d({mutationFn:s=>a.addDoctor(s),onSuccess:(s,i)=>{r.invalidateQueries({queryKey:["clinics"]}),r.invalidateQueries({queryKey:["clinic",i.clinicId]}),r.invalidateQueries({queryKey:["clinic-doctors",i.clinicId]}),c.show({title:"Success",message:"Doctor added successfully",color:"green"})},onError:s=>{c.show({title:"Error",message:s.message||"Failed to add doctor",color:"red"})}}),h=d({mutationFn:s=>a.deleteClinic(s),onSuccess:(s,i)=>{r.invalidateQueries({queryKey:["clinics"]}),c.show({title:"Success",message:"Clinic deleted successfully",color:"green"})},onError:s=>{c.show({title:"Error",message:s.message||"Failed to delete clinic",color:"red"})}}),m=d({mutationFn:s=>a.updateDoctor(s),onSuccess:(s,i)=>{r.invalidateQueries({queryKey:["clinics"]}),r.invalidateQueries({queryKey:["clinic-doctors",i.clinicId]}),c.show({title:"Success",message:"Doctor updated successfully",color:"green"})},onError:s=>{c.show({title:"Error",message:s.message||"Failed to update doctor",color:"red"})}}),w=d({mutationFn:s=>a.deleteDoctor(s),onSuccess:(s,i)=>{r.invalidateQueries({queryKey:["clinics"]}),c.show({title:"Success",message:"Doctor deleted successfully",color:"green"})},onError:s=>{c.show({title:"Error",message:s.message||"Failed to delete doctor",color:"red"})}});return{clinics:t.data||[],clinic:e.data,doctors:o?l.data||[]:E,isLoading:t.isLoading||e.isLoading||l.isLoading,isError:t.isError||e.isError||l.isError,error:t.error||e.error||l.error,createClinic:g.mutateAsync,updateClinic:y.mutateAsync,addDoctor:p.mutateAsync,deleteClinic:h.mutateAsync,updateDoctor:m.mutateAsync,deleteDoctor:w.mutateAsync,isCreating:g.isPending,isUpdating:y.isPending,isAddingDoctor:p.isPending,isDeleting:h.isPending,isUpdatingDoctor:m.isPending,isDeletingDoctor:w.isPending}}export{a as c,K as u};
